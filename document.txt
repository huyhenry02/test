Training Java
1. Java cơ bản
	1.1 Giới thiệu Java
		- Java là một ngôn ngữ lập trình hướng đối tượng hoàn toàn. Tất cả mọi thú đề cập đến trong java đều liên quan đến đối tượng được định nghĩa từ trước.
		- Đa nhiệm , Đa Luồng: Java hỗ trợ lập trình đa nhiệm, đa luồng cho phép nhiều tiến trình chạy song song cùng 1 thời diểm và tương tác nhau.
		- Viết một lần, chạy mọi nơi” (Write Once, Run Anywhere).
		- Hỗ trợ mạnh cho việc phát triển ứng dụng
	1.2 Nhập môn Java
		- Cấu trúc 1 chương trình java:
		- Ngôn ngữ lập trình java được thiết kế với các đặc tính xoay quanh đặc trưng hướng đối tượng, xoay quanh việc thiết kế các lớp class  và tạo các đối tượng
			package <package_name>;
			import <other_package>;
			public class ClassName {
  				<Variables (also known as fields)>;
  				<constructor method(s)>;
  				<other methods>;
			}
		- Trong đó:
			+ package: mô tả không gian tên có chưa các lớp của java
			+ import: Từ khóa được sử dụng trong Java nhằm để xác định các class hoặc các package được sử dụng trong lớp này.
			+ class: Từ khóa nhằm để định nghĩa lớp của Java
			+ variables: Biến
			+ methods: Phương thức hay còn gọi là hàm
			+ constructors: Phương thức khởi tạo (Hay hàm khởi tạo) của đối tượng.
		- Package trong Java: là một nhóm các class, interface và các package khác, sử dụng package để tái cấu trúc dự án hợp lý.
		- Có 2 loại package:
			+ Package được tích hợp sẵn
			+ Package tự định nghĩa
		- Trong đó: import java.util.Scanner;
			+ import là từ khóa dùng để khai báo chúng ta sẽ sử dụng gói
			+ java: là gói cha
			+ util : là gói con của gói java
			+ Scanner: là một class chứa trong gói util.
		- Package giúp tái sử dụng.
		- Package giúp tránh xung đột tên.
		- Sub package trong java là gì: Trong một package có thể chứa các package khác, các package này được gọi là sub package.
		- Biến và phạm vi biến trong Java: có 3 kiểu biến trong java, bao gồm biến cục bộ (hay còn gọi là biến local), biến toàn cục (biến instance) và biến tĩnh(biến static).
		- kieu_du_lieu ten_bien = gia_tri;
		- Hàm - Phương thức trong Java
		modifier returnType nameOfMethod (Parameter List) {
   			// method body
		}
		- Trong đó:
			+	Modifiers: Tạm dịch là phạm vi sửa đổi và truy cập
			+	returnType: Là kiểu dữ liệu trả về
			+	nameOfMethod: Là tên của hàm (method)
			+	Parameter là các tham số đầu vào của hàm (có thể có nhiều tham số với nhiều kiểu dữ liệu khác nhau)
			+	method body: là các mã code bên trong hàm

	1.3 Lập trình hướng đối tượng (OOP)
	- Tính đóng gói:
		+ tính đóng gói giúp bảo vệ dữ liệu và tránh truy cập trực tiếp đến các thuộc tính của đối tượng từ bên ngoài qua việc khai báo function, biến như private public
		+ Tính đóng gói là một nguyên tắc mạnh mẽ trong OOP, giúp tạo ra mã nguồn dễ bảo trì và an toàn hơn bằng cách quản lý truy cập đến thông tin của đối tượng.
	- Tính kế thừa: giúp tái sử dụng mã nguồn và tạo ra cấu trúc phân cấp cho các lớp, Điều này cho phép bạn xây dựng các lớp mới trên cơ sở của các lớp đã có, t
	iết kiệm thời gian và công sức, đồng thời duy trì tính nhất quán trong mã nguồn.
	- Tính đa hình:
		+ Nó cho phép bạn viết các phương thức chung mà có thể được sử dụng trên nhiều lớp khác nhau, giúp giảm sự lặp lại mã và tạo ra mã nguồn dễ mở rộng.
		+ Mã nguồn linh hoạt: Tính đa hình cho phép bạn thay đổi hành vi của các đối tượng mà không cần thay đổi mã nguồn của các lớp khác.
	- Tính trừu tượng:
		+ Tập trung vào tính năng quan trọng: Tính trừu tượng giúp bạn tập trung vào các tính năng và hành vi quan trọng mà đối tượng nên có mà không bị phân tâm bởi chi tiết triển khai.
		+ Bảo trì và mở rộng dễ dàng: Bằng cách tạo lớp trừu tượng và định nghĩa giao diện, bạn có thể đảm bảo rằng các đối tượng tuân thủ các quy tắc cố định và dễ mở rộng tính năng trong tương lai.
		+ Che giấu chi tiết phức tạp: Tính trừu tượng cho phép bạn che giấu chi tiết triển khai bên trong các lớp con, giúp làm cho mã nguồn trở nên dễ đọc và dễ bảo trì.
2. Java Core
	2.1 Java collection
	- collections là một khung framework cung cấp kiến trúc để lưu trữ và thao tác trên tập hợp đối tượng, cho phép làm việc với các dữ liệu phức tạp và cung cấp các giao diện ví dụ:
	List, Set (tập hợp), hàng đợi (queue), và ánh xạ (Map)
	- Hệ thống phân cấp Collection Framework:
		+ Java Collection Framework là một bộ thư viện với rất nhiều class mạnh mẽ giúp bạn đơn giản hóa các thao tác khi làm việc với tập hợp và đồ thị.
		+ thành phần trong framework bao gồm:
			++> Interface: kiểu dữ liệu trừu tượng
			++> Classes: các lớp triển khai interface, thể hiện các kiểu dữ liệu cụ thể
			++> Algorithm: các thuật toán sử dụng trong các phương thức thao tác với dữ liệu
	- Cài đặt trong collections:
		+ gói java.util cung cấp tập các lớp cài đặt các giao diện lõi -> tạo ra những cấu trúc dữ liệu như: Vector, HashTable, HashSet, LinkedList, TreeSet, ...
	- Phần interface trong collections:
		+ Giao diện (interface) Collection là cơ sở để phát triển, mở rộng thành các giao diện khác như Set, List, SortedSet và Map và giao diện cơ sở để mở rộng thành SortedMap.
		+ Các giao diện lõi của cấu trúc Collection được mô tả trong bảng sau:
			Collection        interface cơ sở định nghĩa tất cả các phép toán cơ bản cho các lớp cần duy trì thực hiện và cài đặt chúng
			Set               là một collection không thể chứa 2 giá trị trùng lặp.
			SortedSet 		  Mở rộng Set để cài đặt cấu trúc tập hợp được sắp, trong đó không có phần tử được lặp và chúng được sắp xếp theo thứ tự
			Queue             là một collection được sử dụng để chứa nhiều phần tử trước khi xử lý.
			Deque			  là một collection được sử dụng để chứa nhiều phần tử trước khi xử lý. Trong một Deque, tất cả các phần tử mới có thể được chèn vào, lấy ra và lấy ra ở cả hai đầu.
			List              là một collection có thứ tự (đôi khi còn được gọi là một chuỗi). List có thể chứa các phần tử trùng lặp.
			Map               interface cơ sở định nghĩa các phép toán để các lớp sử dụng và cài đặt các ánh xạ từ khoá sang các giá trị
	- Phần thuật toán trong collections:
		+ Lớp java.util.Collection (cần phân biệt với giao diện Collection) cung cấp một số hàm static thực hiện những thuật toán đa xạ cho những phép toán khác nhau trên tập hợp, kể cả sắp xếp, tìm kiểm và dịch chuyển các phần tử.
		+ Một số hàm trong số đó là: Sử dụng thuật toán tìm kiếm nhị phân để xác định chỉ số của phần tử key trong danh sách list.
	- Collection trong Java:
		+
	2.2 Xử lý ngoạilệ
	2.3 Lập trình đa luồng
	2.4 Design Pattern
	2.5 Các lớp và phương thức cơ bản
	2.6 Generics
	2.7 Java I/O và NIO(New Input/Output)
	2.8 Reflection và Annotation
	2.9 Networking trong Java
	2.10 Quản lý bộ nhớ và Garbage Collection
3. Java API và Frameworks
	3.1 Stream API
	3.2 Modules (Java 9+)
4. Spring FW
5. DevOps
6. Xây dựng dự án thực tế


BT thực hành:
- Viết chương trình Java để cộng hai số và in ra kết quả
- Viết chương trình Java để kiểm tra một số nhập vào là số chẵn hay số lẻ.
- Viết chương trình Java để cộng hai số phức.
- Viết chương trình Java để kiểm tra một năm có phải là năm nhuận hay không.
- Viết chương trình Java để kiểm tra một ký tự nhập vào là nguyên âm hay phụ âm.
- Viết chương trình Java để tính lãi suất kép.
- Viết chương trình Java để tính lãi suất.
- Viết chương trình Java để tìm phần nguyên và phần dư khi chia hai số.
- Viết chương trình tìm tất cả các số chia hết cho 7 nhưng không phải bội số của 5, nằm trong đoạn 10 và 200 (tính cả 10 và 200).
Các số thu được sẽ được in thành chuỗi trên một dòng, cách nhau bằng dấu phẩy.